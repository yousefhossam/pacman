#pragma once
#include <SFML/Graphics.hpp>
#include<iostream>
using namespace std;
using namespace sf;


class ghost
{
private:

	string ghostName;
	int ghostCurrentRow;
	int ghostCurrentColumn;
	Texture ghostTexture;
	RectangleShape ghostShape;


public:
	bool canstart;
	int nofmoves;
	ghost(string gname, string gimagename, int grow, int gcolumn,bool s);
	void moveGhost(int arr[][19]);
	void moveGhost(char dir, tile_type t);
	//void moveGhost(int dir, tile_type t);
	void drawGhostonWindow(RenderWindow& window);
	string getGhostname();
	int getGhostRow();
	int getGhostColumn();
	void setGhostRow(int gR);
	void setGhostColumn(int gC);
	void RandomMovement(int newmove, int arr[21][19]);
	void frenzymodeResetPos(int ghostinitialR, int ghostinitialC);
	void SetcolorBlueFrenzy(string frenzyblueghost);
	void SetColorAFTERfrenzy(string nn, string textureofghostFile);
};

// Main Initilization of the Ghosts
//ghost.ghostBlinky ("Blinky", "/Users/SalmaShoukry/Desktop/PacmanBoard/PacmanBoard/Blinky.png", 7, 8);
//ghost.ghostPinky ("Pinky", "/Users/SalmaShoukry/Desktop/PacmanBoard/PacmanBoard/Pinky.jpg", 8, 8);
//ghost.ghostInky ("Inky", "/Users/SalmaShoukry/Desktop/PacmanBoard/PacmanBoard/Inky.jpg", 8, 7);
//ghost.ghostClyde ("Clyde", "/Users/SalmaShoukry/Desktop/PacmanBoard/PacmanBoard/Clyde.jpg", 8, 9);
void ghost::moveGhost(char direc, tile_type t)
{
	if (!canstart)
		return;
	if (t == block)
		return;
	else
	{
		if (direc == 'U')
		{
			ghostCurrentRow--;
			ghostShape.move(0, -35);
		}
		else if (direc == 'D')
		{
			ghostCurrentRow++;
			ghostShape.move(0, 35);

		}

		else if (direc == 'R')
		{
			ghostCurrentColumn++;
			ghostShape.move(35, 0);

		}

		else if (direc == 'L')
		{
			ghostCurrentColumn--;
			ghostShape.move(-35, 0);

		}
		nofmoves++;
	}
}

ghost::ghost(string gname, string gimagename, int grow, int gcolumn,bool s)
{
	ghostName = gname;
	ghostCurrentColumn = gcolumn;
	ghostCurrentRow = grow;
	ghostShape.setSize(Vector2f(35, 35));
	ghostShape.setPosition(200 + 35 * gcolumn, 200 + 35 * grow);
	ghostTexture.loadFromFile(gimagename);
	ghostShape.setTexture(&ghostTexture);
	canstart = s;
	nofmoves = 0;
}
void ghost::RandomMovement(int newmove, int arr[21][19])
{
	if (newmove == 1) //Left movement
	{
		if (arr[ghostCurrentRow][ghostCurrentColumn - 1] != -01)
		{
			ghostCurrentColumn--;
			ghostShape.move(-35, 0);
		}
	}
	if (newmove == 2) //Right movement
	{
		if (arr[ghostCurrentRow][ghostCurrentColumn + 1] != -01)
		{
			ghostCurrentColumn++;
			ghostShape.move(35, 0);
		}
	}
	if (newmove == 3) //Up movement
	{
		if (arr[ghostCurrentRow- 1][ghostCurrentColumn] != -01)
		{
			ghostCurrentRow--;
			ghostShape.move(0, -35);
		}
	}
	if (newmove == 4) //Down movement
	{
		if (arr[ghostCurrentRow+ 1][ghostCurrentColumn] != -01)
		{
			ghostCurrentRow++;
			ghostShape.move(35, 0);
		}
	}
}

void ghost::moveGhost(int arr[21][19])
{
	srand(unsigned(time(NULL)));
	int newmove;
	if (ghostName == "Blinky")

		if (arr[ghostCurrentRow][ghostCurrentColumn - 1] != -01 )
		{
			if ((ghostCurrentRow == 8) && (ghostCurrentColumn == 9))	                           //move to the left
			{
				ghostCurrentColumn--;
				ghostShape.move(-35, 0);

			}
			//generate a random movement
			newmove = (rand() % 4) + 1;
			RandomMovement(newmove, arr);
		}

	if (ghostName == "Pinky")
		if (arr[ghostCurrentRow - 1][ghostCurrentColumn] != -01 )
		{
			if ((ghostCurrentRow == 9) && (ghostCurrentColumn == 9))	                           //move upwards
			{
				ghostCurrentRow--;
				ghostShape.move(0, -35);
			}
			//generate a random movement
			newmove = (rand() % 4) + 1;
			RandomMovement(newmove, arr);
		}

	if (ghostName == "Inky")
		if (arr[ghostCurrentRow][ghostCurrentColumn + 1] != -01 )
		{
			if ((ghostCurrentRow == 9) && (ghostCurrentColumn == 8))			                     //move to the right
			{
				ghostCurrentColumn++;
				ghostShape.move(35, 0);
				//move upwards
				ghostCurrentRow--;
				ghostShape.move(0, -35);
				//move to the right
				ghostCurrentColumn++;
				ghostShape.move(35, 0);
			}
			//generate a random movement
			newmove = (rand() % 4) + 1;
			RandomMovement(newmove, arr);
		}
	if (ghostName == "Clyde")
		if (arr[ghostCurrentRow][ghostCurrentColumn - 1] != -01)
		{
			if ((ghostCurrentRow == 9) && (ghostCurrentColumn == 10))	//move to the left
			{
				ghostCurrentColumn--;
				ghostShape.move(-35, 0);
				//upwards
				ghostCurrentRow--;
				ghostShape.move(0, -35);
			}
			//generate a random movement
			newmove = (rand() % 4) + 1;
			RandomMovement(newmove, arr);
		}
}

void ghost::drawGhostonWindow(RenderWindow& window)
{
	window.draw(ghostShape);
}

string ghost::getGhostname()
{
	return ghostName;
}

int ghost::getGhostRow()
{
	return ghostCurrentRow;
}

int ghost::getGhostColumn()
{
	return ghostCurrentColumn;
}

void ghost::setGhostRow(int gR)
{
	ghostCurrentRow = gR;
}

void ghost::setGhostColumn(int gC)
{
	ghostCurrentColumn = gC;
}

void ghost::frenzymodeResetPos(int ghostinitialR, int ghostinitialC)
{

	ghostShape.setPosition(200 + 35 * ghostinitialC, 200 + 35 * ghostinitialR);
	ghostCurrentColumn = ghostinitialC;
	ghostCurrentRow = ghostinitialR;
}
void ghost::SetcolorBlueFrenzy(string frenzyblueghost)
{
	Texture FrenzyModeT;
	FrenzyModeT.loadFromFile(frenzyblueghost);
	ghostShape.setTexture(&FrenzyModeT);
}

void ghost::SetColorAFTERfrenzy(string nn, string textureofghostFile)
{
	if (nn == "Inky")
	{
		ghostTexture.loadFromFile(textureofghostFile);
		ghostShape.setTexture(&ghostTexture);
	}

	else if (nn == "Pinky")
	{
		ghostTexture.loadFromFile(textureofghostFile);
		ghostShape.setTexture(&ghostTexture);
	}
	else if (nn == "Blinky")
	{
		ghostTexture.loadFromFile(textureofghostFile);
		ghostShape.setTexture(&ghostTexture);
	}
	else
	{
		ghostTexture.loadFromFile(textureofghostFile);
		ghostShape.setTexture(&ghostTexture);
	}
}
