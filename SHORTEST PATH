#include<iostream>
#include <vector>
using namespace std;
const int COUNT = 189;
const int INFINITE = 9999;
vector<vector<int>> Dijkstra(int Graph[COUNT][COUNT], int startNode);

void main()
{
	int Graph[COUNT][COUNT];
// to fill graph (me)

	for (int i = 0; i < 189; i++)// fill all the matrix with 0 as if no connections------>next step u will put connections
		for (int j = 0; j < 21; j++)
		{
			Graph[i][j] = 0;
		}

	//now check for connections(paths) in areas above and below each node.
		//IF youre standing at row 1 col 1 the value in this node is 0, so check the block above, below and beside if its != -1 
		//then document its number and establish a connection in row of VALUE OF ARR and column of VALUE OF r+1/c+1/R-1/c-1;
	//arr is the arra that is read from board file 
	for (int i = 0; i < 21; i++)
		for (int j = 0; j < 21; j++)
		{
			if (arr[i][j] != -1)// make sure ur not on a block because blocks arent nodes 
			{
				if (arr[i + 1][j] != -01)// check if below it is not block
				{
					Graph[arr[i][j]][arr[i + 1][j]] = 1; // not a block so establish a connection and store it in Ghraph matrix 
				}
				if (arr[i - 1][j] != -01)//check if above it is not block
				{
					Graph[arr[i][j]][arr[i - 1][j]] = 1; //not block so establish a connectionand store it in Ghraph matrix

				}

				if (arr[j][j - 1] != -01) // check on its left if not block
				{
					Graph[arr[i][j]][arr[i][j - 1]] = 1;// not block so establish a connection
				}
				if (arr[i][j + 1] != -1)// check on its right if not block
				{
					Graph[arr[i][j]][arr[i][j + 1]] = 1;// not block so establish connection 
				}

			}

		}// ana ba2af hena 



	vector<vector<int>> paths = Dijkstra(Graph, 0);
	for (int i = 0; i < COUNT; i++)
	{
		for (int j = paths[i].size() - 1; j >= 0; j--)
			cout << paths[i][j] << " ";
		cout << endl;
	}
}



vector<vector<int>> Dijkstra(int Graph[COUNT][COUNT], int startNode)
{
	int temp[COUNT][COUNT], costs[COUNT], previous[COUNT];
	bool visited[COUNT];
	// temp
	for (int i = 0; i < COUNT; i++)
		for (int j = 0; j < COUNT; j++)
			if (Graph[i][j] == 0)
				temp[i][j] = INFINITE;
			else
				temp[i][j] = Graph[i][j];
	// costs, previous, and visited
	for (int i = 0; i < COUNT; i++)
	{
		costs[i] = temp[startNode][i];
		previous[i] = startNode;
		visited[i] = false;
	}
	// startNode
	costs[startNode] = 0;
	visited[startNode] = true;

	int count = 1, nextNode, minimumCost;
	while (count < COUNT)
	{
		// Find the minimum cost in order to visit a node.
		minimumCost = INFINITE;
		for (int i = 0; i < COUNT; i++)
			if ((costs[i] < minimumCost) && (visited[i] == false))
			{
				minimumCost = costs[i];
				nextNode = i;
			}
		// Visit the node.
		visited[nextNode] = true;
		// Update the costs of the children of the visited node.
		for (int i = 0; i < COUNT; i++)
			if ((minimumCost + temp[nextNode][i] < costs[i]) && (visited[i] == false))
			{
				costs[i] = minimumCost + temp[nextNode][i];
				previous[i] = nextNode;
			}
		count++;
	}
	// Fill the paths.
	int j;
	vector<vector<int>> paths;
	paths.resize(COUNT);
	for (int i = 0; i < COUNT; i++)
	{
		paths[i].push_back(i);
		if (i != startNode)
		{
			j = i;
			do
			{
				j = previous[j];
				paths[i].push_back(j);
			} while (j != startNode);
		}
	}
	return paths;
}











